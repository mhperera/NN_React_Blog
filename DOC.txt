npx create-react-app app-name

cd app-name

code .

npm run start

file structure
    -- node_modules => all node dependencies
    -- public => all public file , public to the browser
    -- src => all our react code goes here
        -- index.js => get all reat components , mounting them to the DOM

======================================================================================
** COMPONENTS **

Self contained section of content

components contains of  
    - Template
    - Logic

html codes inside the component js file=>funtion=>return section is called JSX. Not really the HTML.

babel converts all JSX components into HTML and render that HTML in the DOM

JSX vs. HTML    
    - In HTML   <div class='test-class'></div>
    - In JSX    <div className='test-class'></div> 
    
    Because 'class' is a reserved keyword of Javascript

export default App // This means export the component and eneble to use where it is imported.

======================================================================================
** DYNAMIC VALUES IN TEMPLATE **

define variables inside the function before the return statement;

in the return JSX , add {} and put the variable name inside them.

can define strings and numbers , But cannot add boolean variables or objects like this.

======================================================================================
** MULTIPLE COMPONENTS **

-- Put other component inside the root component 
    eg : If App.js component is the root component ,  add navbar.js, blogdetails.js, Sidebar.js components inside the App.js component

Create a new file.
Type sfc (Stateless functional component) the EMMET Command and hit enter
Enter Component Name (Start with a Capital letter)
Put JSX inside the return;
Check export line.
Import the created component is another component
Place it inside the JSX 
    -- <ComponentName />                Self Closing Tag
    -- <ComponentName></ComponentName>

======================================================================================
** STYLING COMPONENTS (CSS) **

Import stylesheets to the component.
-- Those styles will not only styles that paticular component, but all components rendered into the browser

-- index.css => Globle stylesheet (Add all css here if it is a small project)

{{}} 
    -- outter braces => dynamic variable braces
    -- inner braces => object braces

======================================================================================
** CLICK EVENTS **

-- onClick={ handleClick } => Reference the function assigened to a variable handleClick
-- onClick={ (e) => {handleClickAgain(name,e);} } => Function Revoke to another function to pass parameters

-- DONT DO THIS
    -- onClick={ handleClick(name) } => 
    -- This is revoking a function. This function will execute when the page is loaded and button click event. 

======================================================================================
** STATES **

-- hook 
    starts with the word 'use'

-- useState hook
    gives us to make a reactive value and let us change the value whenever we want
    eg : -
        -- const [varName, setvarName] = useState('VarValue'); // initialize reactive variable using useState hook
        -- setvarName('ChangedVarValue'); // chnage the value of reactive variable using useState hook `set` function

-- useEffect hook
    runs this hook in every render of the component.
    put this before anywhere the return statement.
    doesn't return anything

    Components render in 2 ways
        -- when the page loads initially
        -- when the state change
    Usage
        -- to fetch data
        -- to communicate with authentication service

    ** Dependency Array
        runs the useEffect hook in certain renders only. (not in every single render)
        eg :-
            [] => runs only in initial render
            [stateName] => runs When stateName is changed